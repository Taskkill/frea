a && b = ((#&&) (a, b))
a || b = ((#||) (a, b))

a == b  = ((#=) (a, b))
a < b  = ((#<) (a, b))
a > b  = ((#>) (a, b))

a + b  = ((#+) (a, b))
a +. b  = ((#+.) (a, b))

a - b  = ((#-) (a, b))
a -. b  = ((#-.) (a, b))

a * b  = ((#*) (a, b))
a *. b  = ((#*.) (a, b))

a `div` b = ((#div) (a, b))
a / b  = ((#/) (a, b))

-- a ++ b  = ((#++) (a, b))
-- a `cons` b  = ((#:) (a, b))

-- head a  = ((#head) a)
-- tail a  = ((#tail) a)
-- nil? a  = ((#nil?) a)

show a = ((#show) a)

undefined = undefined

a !! b  = if (b == 0) then (head a) else ((tail a) !! (b - 1))

fst a  = ((#fst) a)
snd a  = ((#snd) a)

la ++ lb = (which-List la
            lb
            (\ ha ta -> (ha : (ta ++ lb))))

head lst = (which-List lst
            Nothing
            (\ h t -> (Just h)))

tail lst = (which-List lst
            undefined -- unsafe but whatever
            (\ h t -> t))


data Bool
  = True
  | False

data Either a b
  = Left a
  | Right b

data Maybe a
  = Nothing
  | Just a

data List a
  = []
  | a : (List a)

show-List list = (which-List list
                    "[]"
                    ( \ head tail -> ( ((show head) ++ " : ") ++ (show-List tail) ) ))

map fn lst = (which-List lst
              []
              (\ h t -> ((fn h) : (map fn t)) ))

show-Maybe m = (which-Maybe m
                "Nothing"
                (\ v -> (show v)))

