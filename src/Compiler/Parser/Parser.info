-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Compiler/Parser/Parser.y
-----------------------------------------------------------------------------

state 23 contains 1 shift/reduce conflicts.
state 24 contains 3 shift/reduce conflicts.
state 30 contains 1 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.
state 51 contains 3 shift/reduce conflicts.
state 60 contains 3 shift/reduce conflicts.
state 81 contains 1 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 94 contains 3 shift/reduce conflicts.
state 95 contains 3 shift/reduce conflicts.
state 98 contains 3 shift/reduce conflicts.
state 109 contains 3 shift/reduce conflicts.
state 110 contains 3 shift/reduce conflicts.

terminal match is unused
terminal with is unused
terminal data is unused
terminal type is unused
terminal '_' is unused
terminal the is unused
terminal claim is unused
terminal define is unused
terminal assume is unused
terminal rec is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parserAct -> Program                        (0)
	Program -> Exp                                     (1)
	Program -> Assume                                  (2)
	Assume -> OneOrMany__Binding__                     (3)
	Params -> NoneOrMany__Var__                        (4)
	Ident -> Var                                       (5)
	Ident -> '(' Op ')'                                (6)
	Var -> varid                                       (7)
	Op -> symid                                        (8)
	Op -> op                                           (9)
	Oper -> symid                                      (10)
	Oper -> op                                         (11)
	Exp -> Var                                         (12)
	Exp -> '(' op ')'                                  (13)
	Exp -> '(' symid ')'                               (14)
	Exp -> Lit                                         (15)
	Exp -> lambda Params '->' Exp                      (16)
	Exp -> Exp '`' Var '`' Exp                         (17)
	Exp -> Exp Oper Exp                                (18)
	Exp -> '(' Exp OneOrMany__Exp__ ')'                (19)
	Exp -> '(' Exp ')'                                 (20)
	Exp -> fix Exp                                     (21)
	Exp -> if Exp then Exp else Exp                    (22)
	Exp -> let OneOrMany__Binding__ in Exp             (23)
	Exp -> letrec Ident Params '=' Exp in Exp          (24)
	Exp -> '(' Exp CommaSeparated__Exp__ ')'           (25)
	Exp -> '[' NoneOrManySeparated__Exp__ ']'          (26)
	Binding -> Ident '=' Exp                           (27)
	Binding -> Ident Params '=' Exp                    (28)
	Binding -> '(' Op ')' Params '=' Exp               (29)
	Binding -> Var Op Var '=' Exp                      (30)
	Binding -> Var '`' Var '`' Var '=' Exp             (31)
	Lit -> Integer                                     (32)
	Lit -> Double                                      (33)
	Lit -> char                                        (34)
	Lit -> string                                      (35)
	Lit -> bool                                        (36)
	Lit -> unit                                        (37)
	Integer -> integer                                 (38)
	Double -> double                                   (39)
	CommaSeparated__Exp__ -> ',' Exp                   (40)
	CommaSeparated__Exp__ -> ',' Exp CommaSeparated__Exp__   (41)
	NoneOrMany__Var__ ->                               (42)
	NoneOrMany__Var__ -> Var NoneOrMany__Var__         (43)
	NoneOrManySeparated__Exp__ ->                      (44)
	NoneOrManySeparated__Exp__ -> Exp                  (45)
	NoneOrManySeparated__Exp__ -> Exp ',' NoneOrManySeparated__Exp__   (46)
	OneOrMany__Binding__ -> Binding NoneOrMany__Binding__   (47)
	OneOrMany__Exp__ -> Exp NoneOrMany__Exp__          (48)
	NoneOrMany__Binding__ ->                           (49)
	NoneOrMany__Binding__ -> Binding NoneOrMany__Binding__   (50)
	NoneOrMany__Exp__ ->                               (51)
	NoneOrMany__Exp__ -> Exp NoneOrMany__Exp__         (52)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	match          { TokMatch }
	with           { TokWith }
	data           { TokData }
	if             { TokIf }
	then           { TokThen }
	else           { TokElse }
	let            { TokLet }
	in             { TokIn }
	type           { TokType }
	'_'            { TokHole }
	the            { TokThe }
	claim          { TokClaim }
	define         { TokDefine }
	lambda         { TokLambda }
	fix            { TokFix }
	letrec         { TokLetrec }
	'->'           { TokOperator "->" }
	'='            { TokOperator "=" }
	varid          { TokVarId $$ }
	op             { TokOperator $$ }
	symid          { TokNativeSym $$ }
	'('            { TokLeftParen }
	')'            { TokRightParen }
	'['            { TokLeftBracket }
	']'            { TokRightBracket }
	','            { TokComma }
	'`'            { TokBackTick }
	unit           { TokUnit }
	integer        { TokInt $$ }
	char           { TokChar $$ }
	double         { TokDouble $$ }
	string         { TokString $$ }
	bool           { TokBool $$ }
	assume         { TokAssume }
	rec            { TokRec }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parserAct rule  0
	Program         rules 1, 2
	Assume          rule  3
	Params          rule  4
	Ident           rules 5, 6
	Var             rule  7
	Op              rules 8, 9
	Oper            rules 10, 11
	Exp             rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	Binding         rules 27, 28, 29, 30, 31
	Lit             rules 32, 33, 34, 35, 36, 37
	Integer         rule  38
	Double          rule  39
	CommaSeparated__Exp__ rules 40, 41
	NoneOrMany__Var__ rules 42, 43
	NoneOrManySeparated__Exp__ rules 44, 45, 46
	OneOrMany__Binding__ rule  47
	OneOrMany__Exp__ rule  48
	NoneOrMany__Binding__ rules 49, 50
	NoneOrMany__Exp__ rules 51, 52

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parserAct -> . Program                       (rule 0)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 27
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Program        goto state 21
	Assume         goto state 22
	Ident          goto state 23
	Var            goto state 24
	Exp            goto state 3
	Binding        goto state 25
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6
	OneOrMany__Binding__goto state 26

State 1

	Program -> . Exp                                    (rule 1)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 3
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 2

	Exp -> Var .                                        (rule 12)

	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	lambda         reduce using rule 12
	fix            reduce using rule 12
	letrec         reduce using rule 12
	varid          reduce using rule 12
	op             reduce using rule 12
	symid          reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'['            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	'`'            reduce using rule 12
	unit           reduce using rule 12
	integer        reduce using rule 12
	char           reduce using rule 12
	double         reduce using rule 12
	string         reduce using rule 12
	bool           reduce using rule 12
	%eof           reduce using rule 12


State 3

	Program -> Exp .                                    (rule 1)
	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)

	op             shift, and enter state 56
	symid          shift, and enter state 57
	'`'            shift, and enter state 58
	%eof           reduce using rule 1

	Oper           goto state 55

State 4

	Exp -> Lit .                                        (rule 15)

	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	lambda         reduce using rule 15
	fix            reduce using rule 15
	letrec         reduce using rule 15
	varid          reduce using rule 15
	op             reduce using rule 15
	symid          reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	'`'            reduce using rule 15
	unit           reduce using rule 15
	integer        reduce using rule 15
	char           reduce using rule 15
	double         reduce using rule 15
	string         reduce using rule 15
	bool           reduce using rule 15
	%eof           reduce using rule 15


State 5

	Lit -> Integer .                                    (rule 32)

	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	let            reduce using rule 32
	in             reduce using rule 32
	lambda         reduce using rule 32
	fix            reduce using rule 32
	letrec         reduce using rule 32
	varid          reduce using rule 32
	op             reduce using rule 32
	symid          reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	','            reduce using rule 32
	'`'            reduce using rule 32
	unit           reduce using rule 32
	integer        reduce using rule 32
	char           reduce using rule 32
	double         reduce using rule 32
	string         reduce using rule 32
	bool           reduce using rule 32
	%eof           reduce using rule 32


State 6

	Lit -> Double .                                     (rule 33)

	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	let            reduce using rule 33
	in             reduce using rule 33
	lambda         reduce using rule 33
	fix            reduce using rule 33
	letrec         reduce using rule 33
	varid          reduce using rule 33
	op             reduce using rule 33
	symid          reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	','            reduce using rule 33
	'`'            reduce using rule 33
	unit           reduce using rule 33
	integer        reduce using rule 33
	char           reduce using rule 33
	double         reduce using rule 33
	string         reduce using rule 33
	bool           reduce using rule 33
	%eof           reduce using rule 33


State 7

	Exp -> if . Exp then Exp else Exp                   (rule 22)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 54
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 8

	Exp -> let . OneOrMany__Binding__ in Exp            (rule 23)

	varid          shift, and enter state 12
	'('            shift, and enter state 35

	Ident          goto state 23
	Var            goto state 32
	Binding        goto state 25
	OneOrMany__Binding__goto state 53

State 9

	Exp -> lambda . Params '->' Exp                     (rule 16)

	'->'           reduce using rule 42
	varid          shift, and enter state 12

	Params         goto state 52
	Var            goto state 41
	NoneOrMany__Var__goto state 42

State 10

	Exp -> fix . Exp                                    (rule 21)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 51
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 11

	Exp -> letrec . Ident Params '=' Exp in Exp         (rule 24)

	varid          shift, and enter state 12
	'('            shift, and enter state 50

	Ident          goto state 48
	Var            goto state 49

State 12

	Var -> varid .                                      (rule 7)

	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	lambda         reduce using rule 7
	fix            reduce using rule 7
	letrec         reduce using rule 7
	'->'           reduce using rule 7
	'='            reduce using rule 7
	varid          reduce using rule 7
	op             reduce using rule 7
	symid          reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'['            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	'`'            reduce using rule 7
	unit           reduce using rule 7
	integer        reduce using rule 7
	char           reduce using rule 7
	double         reduce using rule 7
	string         reduce using rule 7
	bool           reduce using rule 7
	%eof           reduce using rule 7


State 13

	Exp -> '(' . op ')'                                 (rule 13)
	Exp -> '(' . symid ')'                              (rule 14)
	Exp -> '(' . Exp OneOrMany__Exp__ ')'               (rule 19)
	Exp -> '(' . Exp ')'                                (rule 20)
	Exp -> '(' . Exp CommaSeparated__Exp__ ')'          (rule 25)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	op             shift, and enter state 46
	symid          shift, and enter state 47
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 29
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 14

	Exp -> '[' . NoneOrManySeparated__Exp__ ']'         (rule 26)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	']'            reduce using rule 44
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 44
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6
	NoneOrManySeparated__Exp__goto state 45

State 15

	Lit -> unit .                                       (rule 37)

	if             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	let            reduce using rule 37
	in             reduce using rule 37
	lambda         reduce using rule 37
	fix            reduce using rule 37
	letrec         reduce using rule 37
	varid          reduce using rule 37
	op             reduce using rule 37
	symid          reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	','            reduce using rule 37
	'`'            reduce using rule 37
	unit           reduce using rule 37
	integer        reduce using rule 37
	char           reduce using rule 37
	double         reduce using rule 37
	string         reduce using rule 37
	bool           reduce using rule 37
	%eof           reduce using rule 37


State 16

	Integer -> integer .                                (rule 38)

	if             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	let            reduce using rule 38
	in             reduce using rule 38
	lambda         reduce using rule 38
	fix            reduce using rule 38
	letrec         reduce using rule 38
	varid          reduce using rule 38
	op             reduce using rule 38
	symid          reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	','            reduce using rule 38
	'`'            reduce using rule 38
	unit           reduce using rule 38
	integer        reduce using rule 38
	char           reduce using rule 38
	double         reduce using rule 38
	string         reduce using rule 38
	bool           reduce using rule 38
	%eof           reduce using rule 38


State 17

	Lit -> char .                                       (rule 34)

	if             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	let            reduce using rule 34
	in             reduce using rule 34
	lambda         reduce using rule 34
	fix            reduce using rule 34
	letrec         reduce using rule 34
	varid          reduce using rule 34
	op             reduce using rule 34
	symid          reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	','            reduce using rule 34
	'`'            reduce using rule 34
	unit           reduce using rule 34
	integer        reduce using rule 34
	char           reduce using rule 34
	double         reduce using rule 34
	string         reduce using rule 34
	bool           reduce using rule 34
	%eof           reduce using rule 34


State 18

	Double -> double .                                  (rule 39)

	if             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	let            reduce using rule 39
	in             reduce using rule 39
	lambda         reduce using rule 39
	fix            reduce using rule 39
	letrec         reduce using rule 39
	varid          reduce using rule 39
	op             reduce using rule 39
	symid          reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	','            reduce using rule 39
	'`'            reduce using rule 39
	unit           reduce using rule 39
	integer        reduce using rule 39
	char           reduce using rule 39
	double         reduce using rule 39
	string         reduce using rule 39
	bool           reduce using rule 39
	%eof           reduce using rule 39


State 19

	Lit -> string .                                     (rule 35)

	if             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	let            reduce using rule 35
	in             reduce using rule 35
	lambda         reduce using rule 35
	fix            reduce using rule 35
	letrec         reduce using rule 35
	varid          reduce using rule 35
	op             reduce using rule 35
	symid          reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	','            reduce using rule 35
	'`'            reduce using rule 35
	unit           reduce using rule 35
	integer        reduce using rule 35
	char           reduce using rule 35
	double         reduce using rule 35
	string         reduce using rule 35
	bool           reduce using rule 35
	%eof           reduce using rule 35


State 20

	Lit -> bool .                                       (rule 36)

	if             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	let            reduce using rule 36
	in             reduce using rule 36
	lambda         reduce using rule 36
	fix            reduce using rule 36
	letrec         reduce using rule 36
	varid          reduce using rule 36
	op             reduce using rule 36
	symid          reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	','            reduce using rule 36
	'`'            reduce using rule 36
	unit           reduce using rule 36
	integer        reduce using rule 36
	char           reduce using rule 36
	double         reduce using rule 36
	string         reduce using rule 36
	bool           reduce using rule 36
	%eof           reduce using rule 36


State 21

	%start_parserAct -> Program .                       (rule 0)

	%eof           accept


State 22

	Program -> Assume .                                 (rule 2)

	%eof           reduce using rule 2


State 23

	Binding -> Ident . '=' Exp                          (rule 27)
	Binding -> Ident . Params '=' Exp                   (rule 28)

	'='            shift, and enter state 43
			(reduce using rule 42)

	varid          shift, and enter state 12

	Params         goto state 40
	Var            goto state 41
	NoneOrMany__Var__goto state 42

State 24

	Ident -> Var .                                      (rule 5)
	Exp -> Var .                                        (rule 12)
	Binding -> Var . Op Var '=' Exp                     (rule 30)
	Binding -> Var . '`' Var '`' Var '=' Exp            (rule 31)

	'='            reduce using rule 5
	varid          reduce using rule 5
	op             shift, and enter state 37
			(reduce using rule 12)

	symid          shift, and enter state 38
			(reduce using rule 12)

	'`'            shift, and enter state 39
			(reduce using rule 12)

	%eof           reduce using rule 12

	Op             goto state 36

State 25

	OneOrMany__Binding__ -> Binding . NoneOrMany__Binding__    (rule 47)

	in             reduce using rule 49
	varid          shift, and enter state 12
	'('            shift, and enter state 35
	%eof           reduce using rule 49

	Ident          goto state 23
	Var            goto state 32
	Binding        goto state 33
	NoneOrMany__Binding__goto state 34

State 26

	Assume -> OneOrMany__Binding__ .                    (rule 3)

	%eof           reduce using rule 3


State 27

	Ident -> '(' . Op ')'                               (rule 6)
	Exp -> '(' . op ')'                                 (rule 13)
	Exp -> '(' . symid ')'                              (rule 14)
	Exp -> '(' . Exp OneOrMany__Exp__ ')'               (rule 19)
	Exp -> '(' . Exp ')'                                (rule 20)
	Exp -> '(' . Exp CommaSeparated__Exp__ ')'          (rule 25)
	Binding -> '(' . Op ')' Params '=' Exp              (rule 29)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	op             shift, and enter state 30
	symid          shift, and enter state 31
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Op             goto state 28
	Exp            goto state 29
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 28

	Ident -> '(' Op . ')'                               (rule 6)
	Binding -> '(' Op . ')' Params '=' Exp              (rule 29)

	')'            shift, and enter state 81


State 29

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> '(' Exp . OneOrMany__Exp__ ')'               (rule 19)
	Exp -> '(' Exp . ')'                                (rule 20)
	Exp -> '(' Exp . CommaSeparated__Exp__ ')'          (rule 25)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            shift, and enter state 13
	')'            shift, and enter state 79
	'['            shift, and enter state 14
	','            shift, and enter state 80
	'`'            shift, and enter state 58
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Oper           goto state 55
	Exp            goto state 76
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6
	CommaSeparated__Exp__goto state 77
	OneOrMany__Exp__goto state 78

State 30

	Op -> op .                                          (rule 9)
	Exp -> '(' op . ')'                                 (rule 13)

	')'            shift, and enter state 67
			(reduce using rule 9)



State 31

	Op -> symid .                                       (rule 8)
	Exp -> '(' symid . ')'                              (rule 14)

	')'            shift, and enter state 66
			(reduce using rule 8)



State 32

	Ident -> Var .                                      (rule 5)
	Binding -> Var . Op Var '=' Exp                     (rule 30)
	Binding -> Var . '`' Var '`' Var '=' Exp            (rule 31)

	'='            reduce using rule 5
	varid          reduce using rule 5
	op             shift, and enter state 37
	symid          shift, and enter state 38
	'`'            shift, and enter state 39

	Op             goto state 36

State 33

	NoneOrMany__Binding__ -> Binding . NoneOrMany__Binding__    (rule 50)

	in             reduce using rule 49
	varid          shift, and enter state 12
	'('            shift, and enter state 35
	%eof           reduce using rule 49

	Ident          goto state 23
	Var            goto state 32
	Binding        goto state 33
	NoneOrMany__Binding__goto state 75

State 34

	OneOrMany__Binding__ -> Binding NoneOrMany__Binding__ .    (rule 47)

	in             reduce using rule 47
	%eof           reduce using rule 47


State 35

	Ident -> '(' . Op ')'                               (rule 6)
	Binding -> '(' . Op ')' Params '=' Exp              (rule 29)

	op             shift, and enter state 37
	symid          shift, and enter state 38

	Op             goto state 28

State 36

	Binding -> Var Op . Var '=' Exp                     (rule 30)

	varid          shift, and enter state 12

	Var            goto state 74

State 37

	Op -> op .                                          (rule 9)

	varid          reduce using rule 9
	')'            reduce using rule 9


State 38

	Op -> symid .                                       (rule 8)

	varid          reduce using rule 8
	')'            reduce using rule 8


State 39

	Binding -> Var '`' . Var '`' Var '=' Exp            (rule 31)

	varid          shift, and enter state 12

	Var            goto state 73

State 40

	Binding -> Ident Params . '=' Exp                   (rule 28)

	'='            shift, and enter state 72


State 41

	NoneOrMany__Var__ -> Var . NoneOrMany__Var__        (rule 43)

	'->'           reduce using rule 42
	'='            reduce using rule 42
	varid          shift, and enter state 12

	Var            goto state 41
	NoneOrMany__Var__goto state 71

State 42

	Params -> NoneOrMany__Var__ .                       (rule 4)

	'->'           reduce using rule 4
	'='            reduce using rule 4


State 43

	Binding -> Ident '=' . Exp                          (rule 27)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 70
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 44

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	NoneOrManySeparated__Exp__ -> Exp .                 (rule 45)
	NoneOrManySeparated__Exp__ -> Exp . ',' NoneOrManySeparated__Exp__    (rule 46)

	op             shift, and enter state 56
	symid          shift, and enter state 57
	']'            reduce using rule 45
	','            shift, and enter state 69
	'`'            shift, and enter state 58

	Oper           goto state 55

State 45

	Exp -> '[' NoneOrManySeparated__Exp__ . ']'         (rule 26)

	']'            shift, and enter state 68


State 46

	Exp -> '(' op . ')'                                 (rule 13)

	')'            shift, and enter state 67


State 47

	Exp -> '(' symid . ')'                              (rule 14)

	')'            shift, and enter state 66


State 48

	Exp -> letrec Ident . Params '=' Exp in Exp         (rule 24)

	'='            reduce using rule 42
	varid          shift, and enter state 12

	Params         goto state 65
	Var            goto state 41
	NoneOrMany__Var__goto state 42

State 49

	Ident -> Var .                                      (rule 5)

	'='            reduce using rule 5
	varid          reduce using rule 5


State 50

	Ident -> '(' . Op ')'                               (rule 6)

	op             shift, and enter state 37
	symid          shift, and enter state 38

	Op             goto state 64

State 51

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> fix Exp .                                    (rule 21)

	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	let            reduce using rule 21
	in             reduce using rule 21
	lambda         reduce using rule 21
	fix            reduce using rule 21
	letrec         reduce using rule 21
	varid          reduce using rule 21
	op             shift, and enter state 56
			(reduce using rule 21)

	symid          shift, and enter state 57
			(reduce using rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	'['            reduce using rule 21
	']'            reduce using rule 21
	','            reduce using rule 21
	'`'            shift, and enter state 58
			(reduce using rule 21)

	unit           reduce using rule 21
	integer        reduce using rule 21
	char           reduce using rule 21
	double         reduce using rule 21
	string         reduce using rule 21
	bool           reduce using rule 21
	%eof           reduce using rule 21

	Oper           goto state 55

State 52

	Exp -> lambda Params . '->' Exp                     (rule 16)

	'->'           shift, and enter state 63


State 53

	Exp -> let OneOrMany__Binding__ . in Exp            (rule 23)

	in             shift, and enter state 62


State 54

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> if Exp . then Exp else Exp                   (rule 22)

	then           shift, and enter state 61
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'`'            shift, and enter state 58

	Oper           goto state 55

State 55

	Exp -> Exp Oper . Exp                               (rule 18)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 60
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 56

	Oper -> op .                                        (rule 11)

	if             reduce using rule 11
	let            reduce using rule 11
	lambda         reduce using rule 11
	fix            reduce using rule 11
	letrec         reduce using rule 11
	varid          reduce using rule 11
	'('            reduce using rule 11
	'['            reduce using rule 11
	unit           reduce using rule 11
	integer        reduce using rule 11
	char           reduce using rule 11
	double         reduce using rule 11
	string         reduce using rule 11
	bool           reduce using rule 11


State 57

	Oper -> symid .                                     (rule 10)

	if             reduce using rule 10
	let            reduce using rule 10
	lambda         reduce using rule 10
	fix            reduce using rule 10
	letrec         reduce using rule 10
	varid          reduce using rule 10
	'('            reduce using rule 10
	'['            reduce using rule 10
	unit           reduce using rule 10
	integer        reduce using rule 10
	char           reduce using rule 10
	double         reduce using rule 10
	string         reduce using rule 10
	bool           reduce using rule 10


State 58

	Exp -> Exp '`' . Var '`' Exp                        (rule 17)

	varid          shift, and enter state 12

	Var            goto state 59

State 59

	Exp -> Exp '`' Var . '`' Exp                        (rule 17)

	'`'            shift, and enter state 97


State 60

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> Exp Oper Exp .                               (rule 18)

	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	let            reduce using rule 18
	in             reduce using rule 18
	lambda         reduce using rule 18
	fix            reduce using rule 18
	letrec         reduce using rule 18
	varid          reduce using rule 18
	op             shift, and enter state 56
			(reduce using rule 18)

	symid          shift, and enter state 57
			(reduce using rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'['            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	'`'            shift, and enter state 58
			(reduce using rule 18)

	unit           reduce using rule 18
	integer        reduce using rule 18
	char           reduce using rule 18
	double         reduce using rule 18
	string         reduce using rule 18
	bool           reduce using rule 18
	%eof           reduce using rule 18

	Oper           goto state 55

State 61

	Exp -> if Exp then . Exp else Exp                   (rule 22)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 96
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 62

	Exp -> let OneOrMany__Binding__ in . Exp            (rule 23)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 95
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 63

	Exp -> lambda Params '->' . Exp                     (rule 16)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 94
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 64

	Ident -> '(' Op . ')'                               (rule 6)

	')'            shift, and enter state 93


State 65

	Exp -> letrec Ident Params . '=' Exp in Exp         (rule 24)

	'='            shift, and enter state 92


State 66

	Exp -> '(' symid ')' .                              (rule 14)

	if             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	lambda         reduce using rule 14
	fix            reduce using rule 14
	letrec         reduce using rule 14
	varid          reduce using rule 14
	op             reduce using rule 14
	symid          reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'['            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	'`'            reduce using rule 14
	unit           reduce using rule 14
	integer        reduce using rule 14
	char           reduce using rule 14
	double         reduce using rule 14
	string         reduce using rule 14
	bool           reduce using rule 14
	%eof           reduce using rule 14


State 67

	Exp -> '(' op ')' .                                 (rule 13)

	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	lambda         reduce using rule 13
	fix            reduce using rule 13
	letrec         reduce using rule 13
	varid          reduce using rule 13
	op             reduce using rule 13
	symid          reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'['            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	'`'            reduce using rule 13
	unit           reduce using rule 13
	integer        reduce using rule 13
	char           reduce using rule 13
	double         reduce using rule 13
	string         reduce using rule 13
	bool           reduce using rule 13
	%eof           reduce using rule 13


State 68

	Exp -> '[' NoneOrManySeparated__Exp__ ']' .         (rule 26)

	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	let            reduce using rule 26
	in             reduce using rule 26
	lambda         reduce using rule 26
	fix            reduce using rule 26
	letrec         reduce using rule 26
	varid          reduce using rule 26
	op             reduce using rule 26
	symid          reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	','            reduce using rule 26
	'`'            reduce using rule 26
	unit           reduce using rule 26
	integer        reduce using rule 26
	char           reduce using rule 26
	double         reduce using rule 26
	string         reduce using rule 26
	bool           reduce using rule 26
	%eof           reduce using rule 26


State 69

	NoneOrManySeparated__Exp__ -> Exp ',' . NoneOrManySeparated__Exp__    (rule 46)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	']'            reduce using rule 44
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 44
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6
	NoneOrManySeparated__Exp__goto state 91

State 70

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Binding -> Ident '=' Exp .                          (rule 27)

	in             reduce using rule 27
	varid          reduce using rule 27
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            reduce using rule 27
	'`'            shift, and enter state 58
	%eof           reduce using rule 27

	Oper           goto state 55

State 71

	NoneOrMany__Var__ -> Var NoneOrMany__Var__ .        (rule 43)

	'->'           reduce using rule 43
	'='            reduce using rule 43


State 72

	Binding -> Ident Params '=' . Exp                   (rule 28)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 90
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 73

	Binding -> Var '`' Var . '`' Var '=' Exp            (rule 31)

	'`'            shift, and enter state 89


State 74

	Binding -> Var Op Var . '=' Exp                     (rule 30)

	'='            shift, and enter state 88


State 75

	NoneOrMany__Binding__ -> Binding NoneOrMany__Binding__ .    (rule 50)

	in             reduce using rule 50
	%eof           reduce using rule 50


State 76

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	OneOrMany__Exp__ -> Exp . NoneOrMany__Exp__         (rule 48)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            shift, and enter state 13
	')'            reduce using rule 51
	'['            shift, and enter state 14
	'`'            shift, and enter state 58
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Oper           goto state 55
	Exp            goto state 86
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6
	NoneOrMany__Exp__goto state 87

State 77

	Exp -> '(' Exp CommaSeparated__Exp__ . ')'          (rule 25)

	')'            shift, and enter state 85


State 78

	Exp -> '(' Exp OneOrMany__Exp__ . ')'               (rule 19)

	')'            shift, and enter state 84


State 79

	Exp -> '(' Exp ')' .                                (rule 20)

	if             reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	let            reduce using rule 20
	in             reduce using rule 20
	lambda         reduce using rule 20
	fix            reduce using rule 20
	letrec         reduce using rule 20
	varid          reduce using rule 20
	op             reduce using rule 20
	symid          reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'['            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20
	'`'            reduce using rule 20
	unit           reduce using rule 20
	integer        reduce using rule 20
	char           reduce using rule 20
	double         reduce using rule 20
	string         reduce using rule 20
	bool           reduce using rule 20
	%eof           reduce using rule 20


State 80

	CommaSeparated__Exp__ -> ',' . Exp                  (rule 40)
	CommaSeparated__Exp__ -> ',' . Exp CommaSeparated__Exp__    (rule 41)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 83
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 81

	Ident -> '(' Op ')' .                               (rule 6)
	Binding -> '(' Op ')' . Params '=' Exp              (rule 29)

	'='            reduce using rule 42
			(reduce using rule 6)

	varid          shift, and enter state 12
			(reduce using rule 6)


	Params         goto state 82
	Var            goto state 41
	NoneOrMany__Var__goto state 42

State 82

	Binding -> '(' Op ')' Params . '=' Exp              (rule 29)

	'='            shift, and enter state 105


State 83

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	CommaSeparated__Exp__ -> ',' Exp .                  (rule 40)
	CommaSeparated__Exp__ -> ',' Exp . CommaSeparated__Exp__    (rule 41)

	op             shift, and enter state 56
	symid          shift, and enter state 57
	')'            reduce using rule 40
	','            shift, and enter state 80
	'`'            shift, and enter state 58

	Oper           goto state 55
	CommaSeparated__Exp__goto state 104

State 84

	Exp -> '(' Exp OneOrMany__Exp__ ')' .               (rule 19)

	if             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	let            reduce using rule 19
	in             reduce using rule 19
	lambda         reduce using rule 19
	fix            reduce using rule 19
	letrec         reduce using rule 19
	varid          reduce using rule 19
	op             reduce using rule 19
	symid          reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	'`'            reduce using rule 19
	unit           reduce using rule 19
	integer        reduce using rule 19
	char           reduce using rule 19
	double         reduce using rule 19
	string         reduce using rule 19
	bool           reduce using rule 19
	%eof           reduce using rule 19


State 85

	Exp -> '(' Exp CommaSeparated__Exp__ ')' .          (rule 25)

	if             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	let            reduce using rule 25
	in             reduce using rule 25
	lambda         reduce using rule 25
	fix            reduce using rule 25
	letrec         reduce using rule 25
	varid          reduce using rule 25
	op             reduce using rule 25
	symid          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'['            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25
	'`'            reduce using rule 25
	unit           reduce using rule 25
	integer        reduce using rule 25
	char           reduce using rule 25
	double         reduce using rule 25
	string         reduce using rule 25
	bool           reduce using rule 25
	%eof           reduce using rule 25


State 86

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	NoneOrMany__Exp__ -> Exp . NoneOrMany__Exp__        (rule 52)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            shift, and enter state 13
	')'            reduce using rule 51
	'['            shift, and enter state 14
	'`'            shift, and enter state 58
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Oper           goto state 55
	Exp            goto state 86
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6
	NoneOrMany__Exp__goto state 103

State 87

	OneOrMany__Exp__ -> Exp NoneOrMany__Exp__ .         (rule 48)

	')'            reduce using rule 48


State 88

	Binding -> Var Op Var '=' . Exp                     (rule 30)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 102
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 89

	Binding -> Var '`' Var '`' . Var '=' Exp            (rule 31)

	varid          shift, and enter state 12

	Var            goto state 101

State 90

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Binding -> Ident Params '=' Exp .                   (rule 28)

	in             reduce using rule 28
	varid          reduce using rule 28
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            reduce using rule 28
	'`'            shift, and enter state 58
	%eof           reduce using rule 28

	Oper           goto state 55

State 91

	NoneOrManySeparated__Exp__ -> Exp ',' NoneOrManySeparated__Exp__ .    (rule 46)

	']'            reduce using rule 46


State 92

	Exp -> letrec Ident Params '=' . Exp in Exp         (rule 24)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 100
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 93

	Ident -> '(' Op ')' .                               (rule 6)

	'='            reduce using rule 6
	varid          reduce using rule 6


State 94

	Exp -> lambda Params '->' Exp .                     (rule 16)
	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)

	if             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	lambda         reduce using rule 16
	fix            reduce using rule 16
	letrec         reduce using rule 16
	varid          reduce using rule 16
	op             shift, and enter state 56
			(reduce using rule 16)

	symid          shift, and enter state 57
			(reduce using rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	'`'            shift, and enter state 58
			(reduce using rule 16)

	unit           reduce using rule 16
	integer        reduce using rule 16
	char           reduce using rule 16
	double         reduce using rule 16
	string         reduce using rule 16
	bool           reduce using rule 16
	%eof           reduce using rule 16

	Oper           goto state 55

State 95

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> let OneOrMany__Binding__ in Exp .            (rule 23)

	if             reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	let            reduce using rule 23
	in             reduce using rule 23
	lambda         reduce using rule 23
	fix            reduce using rule 23
	letrec         reduce using rule 23
	varid          reduce using rule 23
	op             shift, and enter state 56
			(reduce using rule 23)

	symid          shift, and enter state 57
			(reduce using rule 23)

	'('            reduce using rule 23
	')'            reduce using rule 23
	'['            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23
	'`'            shift, and enter state 58
			(reduce using rule 23)

	unit           reduce using rule 23
	integer        reduce using rule 23
	char           reduce using rule 23
	double         reduce using rule 23
	string         reduce using rule 23
	bool           reduce using rule 23
	%eof           reduce using rule 23

	Oper           goto state 55

State 96

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> if Exp then Exp . else Exp                   (rule 22)

	else           shift, and enter state 99
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'`'            shift, and enter state 58

	Oper           goto state 55

State 97

	Exp -> Exp '`' Var '`' . Exp                        (rule 17)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 98
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 98

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp '`' Var '`' Exp .                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)

	if             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	lambda         reduce using rule 17
	fix            reduce using rule 17
	letrec         reduce using rule 17
	varid          reduce using rule 17
	op             shift, and enter state 56
			(reduce using rule 17)

	symid          shift, and enter state 57
			(reduce using rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'['            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	'`'            shift, and enter state 58
			(reduce using rule 17)

	unit           reduce using rule 17
	integer        reduce using rule 17
	char           reduce using rule 17
	double         reduce using rule 17
	string         reduce using rule 17
	bool           reduce using rule 17
	%eof           reduce using rule 17

	Oper           goto state 55

State 99

	Exp -> if Exp then Exp else . Exp                   (rule 22)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 109
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 100

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> letrec Ident Params '=' Exp . in Exp         (rule 24)

	in             shift, and enter state 108
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'`'            shift, and enter state 58

	Oper           goto state 55

State 101

	Binding -> Var '`' Var '`' Var . '=' Exp            (rule 31)

	'='            shift, and enter state 107


State 102

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Binding -> Var Op Var '=' Exp .                     (rule 30)

	in             reduce using rule 30
	varid          reduce using rule 30
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            reduce using rule 30
	'`'            shift, and enter state 58
	%eof           reduce using rule 30

	Oper           goto state 55

State 103

	NoneOrMany__Exp__ -> Exp NoneOrMany__Exp__ .        (rule 52)

	')'            reduce using rule 52


State 104

	CommaSeparated__Exp__ -> ',' Exp CommaSeparated__Exp__ .    (rule 41)

	')'            reduce using rule 41


State 105

	Binding -> '(' Op ')' Params '=' . Exp              (rule 29)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 106
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 106

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Binding -> '(' Op ')' Params '=' Exp .              (rule 29)

	in             reduce using rule 29
	varid          reduce using rule 29
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            reduce using rule 29
	'`'            shift, and enter state 58
	%eof           reduce using rule 29

	Oper           goto state 55

State 107

	Binding -> Var '`' Var '`' Var '=' . Exp            (rule 31)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 111
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 108

	Exp -> letrec Ident Params '=' Exp in . Exp         (rule 24)

	if             shift, and enter state 7
	let            shift, and enter state 8
	lambda         shift, and enter state 9
	fix            shift, and enter state 10
	letrec         shift, and enter state 11
	varid          shift, and enter state 12
	'('            shift, and enter state 13
	'['            shift, and enter state 14
	unit           shift, and enter state 15
	integer        shift, and enter state 16
	char           shift, and enter state 17
	double         shift, and enter state 18
	string         shift, and enter state 19
	bool           shift, and enter state 20

	Var            goto state 2
	Exp            goto state 110
	Lit            goto state 4
	Integer        goto state 5
	Double         goto state 6

State 109

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> if Exp then Exp else Exp .                   (rule 22)

	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	let            reduce using rule 22
	in             reduce using rule 22
	lambda         reduce using rule 22
	fix            reduce using rule 22
	letrec         reduce using rule 22
	varid          reduce using rule 22
	op             shift, and enter state 56
			(reduce using rule 22)

	symid          shift, and enter state 57
			(reduce using rule 22)

	'('            reduce using rule 22
	')'            reduce using rule 22
	'['            reduce using rule 22
	']'            reduce using rule 22
	','            reduce using rule 22
	'`'            shift, and enter state 58
			(reduce using rule 22)

	unit           reduce using rule 22
	integer        reduce using rule 22
	char           reduce using rule 22
	double         reduce using rule 22
	string         reduce using rule 22
	bool           reduce using rule 22
	%eof           reduce using rule 22

	Oper           goto state 55

State 110

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Exp -> letrec Ident Params '=' Exp in Exp .         (rule 24)

	if             reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	let            reduce using rule 24
	in             reduce using rule 24
	lambda         reduce using rule 24
	fix            reduce using rule 24
	letrec         reduce using rule 24
	varid          reduce using rule 24
	op             shift, and enter state 56
			(reduce using rule 24)

	symid          shift, and enter state 57
			(reduce using rule 24)

	'('            reduce using rule 24
	')'            reduce using rule 24
	'['            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24
	'`'            shift, and enter state 58
			(reduce using rule 24)

	unit           reduce using rule 24
	integer        reduce using rule 24
	char           reduce using rule 24
	double         reduce using rule 24
	string         reduce using rule 24
	bool           reduce using rule 24
	%eof           reduce using rule 24

	Oper           goto state 55

State 111

	Exp -> Exp . '`' Var '`' Exp                        (rule 17)
	Exp -> Exp . Oper Exp                               (rule 18)
	Binding -> Var '`' Var '`' Var '=' Exp .            (rule 31)

	in             reduce using rule 31
	varid          reduce using rule 31
	op             shift, and enter state 56
	symid          shift, and enter state 57
	'('            reduce using rule 31
	'`'            shift, and enter state 58
	%eof           reduce using rule 31

	Oper           goto state 55

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 53
Number of terminals: 35
Number of non-terminals: 20
Number of states: 112
